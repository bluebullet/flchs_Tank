/*
 Example sketch for the Xbox Wireless Reciver library - developed by Kristian Lauszus
 It supports up to four controllers wirelessly
 For more information see the blog post: http://blog.tkjelectronics.dk/2012/12/xbox-360-receiver-added-to-the-usb-host-library/ or
 send me an e-mail:  kristianl@tkjelectronics.com
 */

#include <XBOXRECV.h>

// Satisfy the IDE, which needs to see the include statment in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#include <SPI.h>
#endif

USB Usb;
XBOXRECV Xbox(&Usb);

const int
PWM_A   = 3,
DIR_A   = 12,
BRAKE_A = 9,
PWM_B   = 11,
DIR_B   = 13,
BRAKE_B = 8,
SNS_A   = A0,
SNS_B   = A1;

int pos = 0;
int pos2 = 0;
int i = 0;
int r = 0;
int l = 0;
int f = 0;
int a = 0;
int b = 0;
int c = 0;
int posX1=0;
int posY1=0;
int posX2=0;
int posY2=0;
//int l_track;
//int r_track;
//int w = 0;
//int v = 0;

void setup() {
  Serial.begin(115200);
    //Serial.begin(9600);           // set up Serial library at 9600 bps
#if !defined(__MIPSEL__)
  while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
#endif
  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); //halt
  }
  Serial.print(F("\r\nXbox Wireless Receiver Library Started"));
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

   // Configure the A output
  pinMode(BRAKE_A, OUTPUT);  // Brake pin on channel A
  pinMode(DIR_A, OUTPUT);    // Direction pin on channel A
  pinMode(BRAKE_B, OUTPUT);  // Brake pin on channel B
  pinMode(DIR_B, OUTPUT);    // Direction pin on channel B
}

void loop() {
  Usb.Task();
  if (Xbox.XboxReceiverConnected) {
   // for (uint8_t i = 0; i < 4; i++) {
      i=0;
      if (Xbox.Xbox360Connected[i]) {
        if (Xbox.getButtonPress(L2, i) || Xbox.getButtonPress(R2, i)) {
          Serial.print("L2: ");
          Serial.print(Xbox.getButtonPress(L2, i));
          Serial.print("\tR2: ");
          Serial.println(Xbox.getButtonPress(R2, i));
          Xbox.setRumbleOn(Xbox.getButtonPress(L2, i), Xbox.getButtonPress(R2, i), i);
        }

        if (Xbox.getAnalogHat(LeftHatX, i) > 7500 || Xbox.getAnalogHat(LeftHatX, i) < -7500 || Xbox.getAnalogHat(LeftHatY, i) > 7500 || Xbox.getAnalogHat(LeftHatY, i) < -7500 || Xbox.getAnalogHat(RightHatX, i) > 7500 || Xbox.getAnalogHat(RightHatX, i) < -7500 || Xbox.getAnalogHat(RightHatY, i) > 7500 || Xbox.getAnalogHat(RightHatY, i) < -7500) {
          if (Xbox.getAnalogHat(LeftHatX, i) > 7500 || Xbox.getAnalogHat(LeftHatX, i) < -7500) {
            Serial.print(F("LeftHatX: "));
            Serial.print(Xbox.getAnalogHat(LeftHatX, i));
            Serial.print("\t");
          }
          if (Xbox.getAnalogHat(LeftHatY, i) > 7500 || Xbox.getAnalogHat(LeftHatY, i) < -7500) {
            Serial.print(F("LeftHatY: "));
            Serial.print(Xbox.getAnalogHat(LeftHatY, i));
            Serial.print("\t");
          }
          if (Xbox.getAnalogHat(RightHatX, i) > 7500 || Xbox.getAnalogHat(RightHatX, i) < -7500) {
            Serial.print(F("RightHatX: "));
            Serial.print(Xbox.getAnalogHat(RightHatX, i));
            Serial.print("\t");
          }
          if (Xbox.getAnalogHat(RightHatY, i) > 7500 || Xbox.getAnalogHat(RightHatY, i) < -7500) {
            Serial.print(F("RightHatY: "));
            Serial.print(Xbox.getAnalogHat(RightHatY, i));
          }
          Serial.println();
        }

        Serial.print("Speed: ");
        Serial.print(pos);
        Serial.print(" and ");
        Serial.print(pos);
        if(pos>0){
        Serial.println("\nDirection: Forward");
        }
        else{
          Serial.println("\nDirection: Backward");
        }
        //mathew's code
        

        a = Xbox.getAnalogHat(LeftHatX, i);
        b = Xbox.getAnalogHat(LeftHatY, i);
        c = (int) (sqrt(pow(abs(a), 2) + pow(abs(b), 2)));
        Serial.print("Speed: ");
        Serial.println(c/128);
        
        r=abs(round(c/128));
        l=abs(round(b/128));
        f=abs(round(a/128));

        //Must Fix Down-Right and Up-Left
        if ((a <= 4095 && a >= -4096) && (b <= 4095 && b >= -4096)){                              //Stick is in the centre, Stop
              digitalWrite(BRAKE_A, HIGH);
              digitalWrite(BRAKE_B, HIGH);
            }

                  if (a > 4095 && b >= -4096 && b <= 4095){
          digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, HIGH);
              digitalWrite(DIR_B, HIGH);
              analogWrite(PWM_A, f); 
              analogWrite(PWM_B, f);
        }
        else if (a < -4096 && b >= -4096 && b <= 4095){
          digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, LOW);
              digitalWrite(DIR_B, LOW);
              analogWrite(PWM_A, f); 
              analogWrite(PWM_B, f);
        }
        else if (b > 4095 && a >= -4096 && a <= 4095){
          digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, LOW);
              digitalWrite(DIR_B, HIGH);
              analogWrite(PWM_A, l); 
              analogWrite(PWM_B, l);
        }
        else {
          digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, HIGH);
              digitalWrite(DIR_B, LOW);
              analogWrite(PWM_A, l); 
              analogWrite(PWM_B, l);

        
          if (a > 4095){                             //Stick is pointed right
            if (b > 4095){
              digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, HIGH);
              digitalWrite(DIR_B,HIGH);
              analogWrite(PWM_A, f); 
              analogWrite(PWM_B, r);
            }
            else if (b < -4096)
            {
              digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, HIGH);
              digitalWrite(DIR_B, HIGH);
              analogWrite(PWM_A, r); 
              analogWrite(PWM_B, f);
            }
          }
          if (a < -4096){                      //Stick is pointed left
            if (b > 4095){
              digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, LOW);
              digitalWrite(DIR_B, LOW);
              analogWrite(PWM_A, r); 
              analogWrite(PWM_B, f);
            }
            else //if (b < -4096)
            {
              digitalWrite(BRAKE_A, LOW);
              digitalWrite(BRAKE_B, LOW);
              digitalWrite(DIR_A, LOW);
              digitalWrite(DIR_B, LOW);
              analogWrite(PWM_A, f); 
              analogWrite(PWM_B, r);
            }

          }
}

     //       else 
        
        r=(c-a)/128;
        l=(c-b)/128;
        
        analogWrite(PWM_A, r); 
        analogWrite(PWM_B, l);
        
        //chris code
  /*     
        posX1 = map(Xbox.getAnalogHat(RightHatX, i), -32768, 32767, -255, 255);
        posY1 = map(Xbox.getAnalogHat(RightHatY, i), -32768, 32767, 255, -255);
        posY2 = map(Xbox.getAnalogHat(RightHatY, i), -32768, 32767, -255, 255);
        analogWrite(PWM_A, (-posX1+posY1)); 
        analogWrite(PWM_B, (-posX1+posY1));
*/
  /*
        int x_axis = Xbox.getAnalogHat(LeftHatX, i); // value of X-Axis joystick (0-1023, 512 = centered)
  int y_axis = Xbox.getAnalogHat(LeftHatY, i); // value of Y-Axis joystick (0-1023, 512 = centered)
  // filter out a centered joystick - no action
  x_axis = map(x_axis, 0, 1023, 0, 255);
  y_axis = map(y_axis, 0, 1023, 0, 255);
  if (x_axis < 510 || x_axis > 514) {
    if (y_axis < 510 || y_axis > 514) {
      // Map values from potentiometers to a smaller range for the PWM motor controllers (0-255)
      int ly_axis = y_axis;
      int ry_axis = y_axis;
      if (x_axis < 126) { // turning left, so slow-down left track
        if (y_axis > 130) { // moving forward
          ly_axis -= (255 - x_axis); // decreasing the value - moving it closer to the center-point - slows it down
        }
        if (y_axis < 126) { // moving in reverse
          ly_axis += (255 - x_axis); // increasing the value - moving it closer to the center-point - slows it down
        }
      }
      if (x_axis > 130) { // turning right, so slow-down right track
        if (y_axis > 130) { // moving forward
          ry_axis -= (255 - x_axis); // decreasing the value - moving it closer to the center-point - slows it down
        }
        if (y_axis < 126) { // moving in reverse
          ry_axis += (255 - x_axis); // increasing the value - moving it closer to the center-point - slows it down
        }
      }
      l_track.write(ly_axis); // here we assume that values > 128 = forward, and < 128 = reverse for the left track motor controller
      r_track.write(ry_axis); // here we assume that values > 128 = forward, and < 128 = reverse for the right track motor controller
    }
  }
  // center both PWM values if the joystick is centered (bringing both motor controllers and tracks to a stop)
  if (x_axis >= 510 || x_axis <= 514) {
    if (y_axis >= 510 || y_axis <= 514) {
      l_track.write(128);
      r_track.write(128);
    }
  }*/
         
        //end
        
        
        if (Xbox.getButtonClick(UP, i)) {
          Xbox.setLedOn(LED1, i);
          Serial.println(F("Up"));
          digitalWrite(BRAKE_A, LOW);  // setting brake LOW disable motor brake
          digitalWrite(BRAKE_B, LOW);  // setting brake LOW disable motor brake
          digitalWrite(DIR_A, HIGH);
          digitalWrite(DIR_B, LOW);
          analogWrite(PWM_A, 200); 
          analogWrite(PWM_B, 200);    
        }
        if (Xbox.getButtonClick(DOWN, i)) {
          Xbox.setLedOn(LED4, i);
          Serial.println(F("Down"));
          digitalWrite(BRAKE_A, LOW);  // setting brake LOW disable motor brake
          digitalWrite(BRAKE_B, LOW);  // setting brake LOW disable motor brake
          digitalWrite(DIR_A, LOW);
          digitalWrite(DIR_B, HIGH); 
          analogWrite(PWM_A, 200); 
          analogWrite(PWM_B, 200);    
        }
        if (Xbox.getButtonClick(LEFT, i)) {
          Xbox.setLedOn(LED3, i);
          digitalWrite(BRAKE_A, LOW);  // setting brake LOW disable motor brake
          digitalWrite(BRAKE_B, LOW);  // setting brake LOW disable motor brake
          Serial.println(F("Left"));
          digitalWrite(DIR_A, HIGH);
          digitalWrite(DIR_B, HIGH); 
          analogWrite(PWM_A, 200); 
          analogWrite(PWM_B, 200);    
        }
        if (Xbox.getButtonClick(RIGHT, i)) {
          Xbox.setLedOn(LED2, i);
          Serial.println(F("Right"));
          digitalWrite(BRAKE_A, LOW);  // setting brake LOW disable motor brake
          digitalWrite(BRAKE_B, LOW);  // setting brake LOW disable motor brake
          digitalWrite(DIR_A, LOW);
          digitalWrite(DIR_B, LOW);
          analogWrite(PWM_A, 200); 
          analogWrite(PWM_B, 200);    
        }

        if (Xbox.getButtonClick(START, i)) {
          Xbox.setLedMode(ALTERNATING, i);
          Serial.println(F("Start"));
        }
        if (Xbox.getButtonClick(BACK, i)) {
          Xbox.setLedBlink(ALL, i);
          Serial.println(F("Back"));
        }
        if (Xbox.getButtonClick(L3, i))
        {
          Serial.println(F("L3"));
            digitalWrite(BRAKE_A, HIGH);
            digitalWrite(BRAKE_B, HIGH);}
        if (Xbox.getButtonClick(R3, i))
          Serial.println(F("R3"));

        if (Xbox.getButtonClick(L1, i))
          Serial.println(F("L1"));
        if (Xbox.getButtonClick(R1, i))
          Serial.println(F("R1"));
        if (Xbox.getButtonClick(XBOX, i)) {
          Xbox.setLedMode(ROTATING, i);
          Serial.print(F("Xbox (Battery: "));
          Serial.print(Xbox.getBatteryLevel(i)); // The battery level in the range 0-3
          Serial.println(F(")"));
        }
        if (Xbox.getButtonClick(SYNC, i)) {
          Serial.println(F("Sync"));
          Xbox.disconnect(i);
        }

        if (Xbox.getButtonClick(A, i))
          Serial.println(F("A"));
        if (Xbox.getButtonClick(B, i)){
          Serial.println(F("B"));
              digitalWrite(BRAKE_A, HIGH);;
              digitalWrite(BRAKE_B, HIGH);}
        if (Xbox.getButtonClick(X, i))
          Serial.println(F("X"));
        if (Xbox.getButtonClick(Y, i))
          Serial.println(F("Y"));
      }
  //  }
  }
}
